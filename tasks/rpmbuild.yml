---

- name: Enable dnf plugins
  ansible.builtin.dnf:
    name: dnf-plugins-core
    state: present

- name: Enable CRB
  ansible.builtin.shell:
    cmd: "dnf config-manager --enable crb && echo 'CRB enabled by ansible_role_slurm' > ~/.ansible.crb-enabled"
    creates: ~/.ansible.crb-enabled

- name: Install development tools
  ansible.builtin.dnf:
    name:
      - rpmdevtools
    state: present

- name: Setup RPM build tree
  ansible.builtin.command:
    cmd: rpmdev-setuptree
    creates: ~/rpmbuild

- name: Verify that checksum is defined
  ansible.builtin.assert:
    that:
      - rpmbuild_checksum | default('') != ''
  when: rpmbuild_calculate_checksum

- name: Register source code archive name
  ansible.builtin.set_fact:
    rpmbuild_src: '{{ rpmbuild_src_url | basename }}'
    rpmbuild_spec: "~/rpmbuild/SPECS/{{ rpmbuild_spec_template | replace('.j2', '') }}"

- name: Check if source code exists
  ansible.builtin.stat:
    path: '~/rpmbuild/SOURCES/{{ rpmbuild_src }}'
    get_checksum: true
  register: rpmbuild_src_check

- name: Obtain source code
  ansible.builtin.get_url:
    url: '{{ rpmbuild_src_url }}'
    dest: '~/rpmbuild/SOURCES/{{ rpmbuild_src }}'
    mode: '644'
    checksum: "{{ rpmbuild_calculate_checksum | ternary(rpmbuild_checksum, '') }}"
  when: not rpmbuild_src_check.stat.exists

- name: Template spec file
  ansible.builtin.template:
    src: '{{ rpmbuild_spec_template }}'
    dest: '{{ rpmbuild_spec }}'
    owner: root
    group: root
    mode: '0644'

- name: Install basic build dependencies
  ansible.builtin.shell:
    cmd: "dnf -y builddep {{ rpmbuild_spec }} && echo 'Dependencies installed by ansible_role_slurm' > ~/.ansible.{{ rpmbuild_package_name }}-dependencies-installed"
    creates: '~/.ansible.{{ rpmbuild_package_name }}-dependencies-installed'
  ignore_errors: true
  register: rpmbuild_builddep_cmd

- name: Debug dependency installation (stdout)
  ansible.builtin.debug:
    msg: "{{ rpmbuild_builddep_cmd.stdout.split('\n') }}"
    verbosity: 1
  when: rpmbuild_builddep_cmd.stdout is defined

- name: Debug dependency installation (stderr)
  ansible.builtin.debug:
    msg: "{{ rpmbuild_builddep_cmd.stderr.split('\n') }}"
    verbosity: 1
  when: rpmbuild_builddep_cmd.stderr is defined

- name: Verify dependency installation
  ansible.builtin.assert:
    that:
      - rpmbuild_builddep_cmd.rc == 0

- name: Debug additional dependencies
  ansible.builtin.debug:
    msg: '{{ rpmbuild_extra_dependencies }}'
    verbosity: 1

- name: Install additional dependencies
  ansible.builtin.dnf:
    name: '{{ rpmbuild_extra_dependencies }}'
    state: present

- name: Debug build flags
  ansible.builtin.debug:
    msg: '{{ rpmbuild_build_flags }}'
    verbosity: 1

- name: Build RPMs
  ansible.builtin.command:
    cmd: 'rpmbuild -ba {{ rpmbuild_spec }} {{ rpmbuild_build_flags }}'
    creates: '~/rpmbuild/RPMS/x86_64/{{ rpmbuild_package_name }}-{{ rpmbuild_package_version }}-1.el{{ ansible_distribution_major_version }}.x86_64.rpm'
  ignore_errors: true
  register: rpmbuild_cmd

- name: Debug rpmbuild (stdout)
  ansible.builtin.debug:
    msg: "{{ rpmbuild_cmd.stdout.split('\n') }}"
    verbosity: 1
  when: rpmbuild_cmd.stdout is defined

- name: Debug rpmbuild (stderr)
  ansible.builtin.debug:
    msg: "{{ rpmbuild_cmd.stderr.split('\n') }}"
    verbosity: 1
  when: rpmbuild_cmd.stderr is defined

- name: Verify rpmbuild
  ansible.builtin.assert:
    that:
      - rpmbuild_cmd.rc == 0
